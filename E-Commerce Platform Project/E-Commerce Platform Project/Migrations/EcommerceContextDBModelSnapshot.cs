// <auto-generated />
using System;
using E_Commerce_Platform_Project.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce_Platform_Project.Migrations
{
    [DbContext(typeof(EcommerceContextDB))]
    partial class EcommerceContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Home Appliances"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            CustomerId = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            CustomerId = 3,
                            Email = "emily.johnson@example.com",
                            FirstName = "Emily",
                            LastName = "Johnson",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            CustomerId = 4,
                            Email = "michael.williams@example.com",
                            FirstName = "Michael",
                            LastName = "Williams",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            CustomerId = 5,
                            Email = "sarah.brown@example.com",
                            FirstName = "Sarah",
                            LastName = "Brown",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2024, 11, 4, 23, 29, 35, 574, DateTimeKind.Local).AddTicks(2769)
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 11, 5, 23, 29, 35, 574, DateTimeKind.Local).AddTicks(2817)
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2024, 11, 3, 23, 29, 35, 574, DateTimeKind.Local).AddTicks(2818)
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = 4,
                            OrderDate = new DateTime(2024, 11, 1, 23, 29, 35, 574, DateTimeKind.Local).AddTicks(2820)
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = 5,
                            OrderDate = new DateTime(2024, 10, 30, 23, 29, 35, 574, DateTimeKind.Local).AddTicks(2827)
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.OrderDetails", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Price = 999.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            Price = 199.99m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Price = 1499.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 4,
                            Price = 19.99m,
                            Quantity = 3
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 7,
                            Price = 89.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 8,
                            Price = 49.99m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 10,
                            Price = 12.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 4,
                            ProductId = 9,
                            Price = 10.99m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 11,
                            Price = 29.99m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 5,
                            ProductId = 12,
                            Price = 19.99m,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Latest model with 5G support",
                            Name = "Smartphone",
                            Price = 999.99m,
                            Stock = 200
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "High performance laptop",
                            Name = "Laptop",
                            Price = 1499.99m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Fitness tracking smartwatch",
                            Name = "Smartwatch",
                            Price = 199.99m,
                            Stock = 300
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "Cotton T-shirt",
                            Name = "T-shirt",
                            Price = 19.99m,
                            Stock = 500
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "Denim jeans",
                            Name = "Jeans",
                            Price = 39.99m,
                            Stock = 350
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "Winter jacket",
                            Name = "Jacket",
                            Price = 79.99m,
                            Stock = 120
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Description = "High power microwave oven",
                            Name = "Microwave Oven",
                            Price = 89.99m,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            Description = "Smoothie blender",
                            Name = "Blender",
                            Price = 49.99m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "Classic novel by F. Scott Fitzgerald",
                            Name = "The Great Gatsby",
                            Price = 10.99m,
                            Stock = 500
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4,
                            Description = "Dystopian novel by George Orwell",
                            Name = "1984",
                            Price = 12.99m,
                            Stock = 450
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5,
                            Description = "Remote controlled car",
                            Name = "Toy Car",
                            Price = 29.99m,
                            Stock = 200
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5,
                            Description = "Set of colorful building blocks",
                            Name = "Building Blocks",
                            Price = 19.99m,
                            Stock = 400
                        });
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Customer", b =>
                {
                    b.OwnsOne("E_Commerce_Platform_Project.Additional_Datatypes.FullAddress", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = 1,
                                    City = "New York",
                                    Street = "123 Elm St",
                                    ZipCode = "10001"
                                },
                                new
                                {
                                    CustomerId = 2,
                                    City = "Los Angeles",
                                    Street = "456 Oak St",
                                    ZipCode = "90001"
                                },
                                new
                                {
                                    CustomerId = 3,
                                    City = "Chicago",
                                    Street = "789 Pine St",
                                    ZipCode = "60007"
                                },
                                new
                                {
                                    CustomerId = 4,
                                    City = "Houston",
                                    Street = "101 Maple St",
                                    ZipCode = "77001"
                                },
                                new
                                {
                                    CustomerId = 5,
                                    City = "Phoenix",
                                    Street = "202 Birch St",
                                    ZipCode = "85001"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Order", b =>
                {
                    b.HasOne("E_Commerce_Platform_Project.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.OrderDetails", b =>
                {
                    b.HasOne("E_Commerce_Platform_Project.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce_Platform_Project.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Product", b =>
                {
                    b.HasOne("E_Commerce_Platform_Project.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce_Platform_Project.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
